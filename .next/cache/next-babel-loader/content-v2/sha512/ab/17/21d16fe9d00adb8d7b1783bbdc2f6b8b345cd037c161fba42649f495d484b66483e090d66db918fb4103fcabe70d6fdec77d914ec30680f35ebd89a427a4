{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst players = require('../../fakeDb');\n\nconsole.log('players\\n', players);\n\nfunction getRandomArbitrary(min, max) {\n  return Math.ceil(Math.random() * (max - min) + min);\n}\n\nexport default (async (req, res) => {\n  const {\n    playerId\n  } = req.query;\n  const io = req.app.get('io');\n  const currentPlayer = players.find(({\n    id\n  }) => id == playerId);\n  const randomOutput = getRandomArbitrary(-11, 10);\n  currentPlayer.balance += randomOutput;\n  io.emit('message', _objectSpread({}, currentPlayer));\n  res.status(200).send(randomOutput);\n});","map":{"version":3,"sources":["C:/Users/Jura/WebstormProjects/gc_test/pages/api/spin.js"],"names":["players","require","console","log","getRandomArbitrary","min","max","Math","ceil","random","req","res","playerId","query","io","app","get","currentPlayer","find","id","randomOutput","balance","emit","status","send"],"mappings":";;;;;;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AAEAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;;AAEA,SAASI,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AACpC,SAAOC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAxC,CAAP;AACD;;AAED,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAeF,GAAG,CAACG,KAAzB;AACA,QAAMC,EAAE,GAAGJ,GAAG,CAACK,GAAJ,CAAQC,GAAR,CAAY,IAAZ,CAAX;AAGA,QAAMC,aAAa,GAAGjB,OAAO,CAACkB,IAAR,CAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAYA,EAAE,IAAIP,QAA/B,CAAtB;AAEA,QAAMQ,YAAY,GAAGhB,kBAAkB,CAAC,CAAC,EAAF,EAAM,EAAN,CAAvC;AACAa,EAAAA,aAAa,CAACI,OAAd,IAAyBD,YAAzB;AAEAN,EAAAA,EAAE,CAACQ,IAAH,CAAQ,SAAR,oBAAwBL,aAAxB;AAEAN,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,YAArB;AACD,CAbD","sourcesContent":["const players = require('../../fakeDb');\r\n\r\nconsole.log('players\\n', players);\r\n\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.ceil(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default async (req, res) => {\r\n  const { playerId } = req.query;\r\n  const io = req.app.get('io');\r\n\r\n\r\n  const currentPlayer = players.find(({ id }) => id == playerId);\r\n\r\n  const randomOutput = getRandomArbitrary(-11, 10);\r\n  currentPlayer.balance += randomOutput;\r\n\r\n  io.emit('message', { ...currentPlayer })\r\n\r\n  res.status(200).send(randomOutput);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}